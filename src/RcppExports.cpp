// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "tlshtree_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// tlsh_n_union
int tlsh_n_union(int threshold, std::vector<std::string> xs, std::vector<std::string> xs2);
RcppExport SEXP _tlshtree_tlsh_n_union(SEXP thresholdSEXP, SEXP xsSEXP, SEXP xs2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xs2(xs2SEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_n_union(threshold, xs, xs2));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_diff
int tlsh_diff(std::string a, std::string b);
RcppExport SEXP _tlshtree_tlsh_diff(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::string >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_diff(a, b));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_tree_info
Rcpp::List tlsh_tree_info(Rcpp::XPtr<TlshTree> tree);
RcppExport SEXP _tlshtree_tlsh_tree_info(SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TlshTree> >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_tree_info(tree));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_tree_new
Rcpp::XPtr<TlshTree> tlsh_tree_new(int leaf_size, Rcpp::StringVector xs);
RcppExport SEXP _tlshtree_tlsh_tree_new(SEXP leaf_sizeSEXP, SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type leaf_size(leaf_sizeSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type xs(xsSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_tree_new(leaf_size, xs));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_tree_matches
Rcpp::List tlsh_tree_matches(Rcpp::XPtr<TlshTree> tree, int threshold, std::vector<std::string> keys);
RcppExport SEXP _tlshtree_tlsh_tree_matches(SEXP treeSEXP, SEXP thresholdSEXP, SEXP keysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TlshTree> >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type keys(keysSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_tree_matches(tree, threshold, keys));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_tree_n_matches
Rcpp::IntegerVector tlsh_tree_n_matches(Rcpp::XPtr<TlshTree> tree, int threshold, std::vector<std::string> keys);
RcppExport SEXP _tlshtree_tlsh_tree_n_matches(SEXP treeSEXP, SEXP thresholdSEXP, SEXP keysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TlshTree> >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type keys(keysSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_tree_n_matches(tree, threshold, keys));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_n_pairs
unsigned int tlsh_n_pairs(unsigned int threshold, Rcpp::StringVector xs);
RcppExport SEXP _tlshtree_tlsh_n_pairs(SEXP thresholdSEXP, SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type xs(xsSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_n_pairs(threshold, xs));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_tree_delete
Rcpp::XPtr<TlshTree> tlsh_tree_delete(Rcpp::XPtr<TlshTree> tree, std::string key_str);
RcppExport SEXP _tlshtree_tlsh_tree_delete(SEXP treeSEXP, SEXP key_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TlshTree> >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< std::string >::type key_str(key_strSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_tree_delete(tree, key_str));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_tree_add
Rcpp::XPtr<TlshTree> tlsh_tree_add(Rcpp::XPtr<TlshTree> tree, std::string key_str);
RcppExport SEXP _tlshtree_tlsh_tree_add(SEXP treeSEXP, SEXP key_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TlshTree> >::type tree(treeSEXP);
    Rcpp::traits::input_parameter< std::string >::type key_str(key_strSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_tree_add(tree, key_str));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_from_str
std::string tlsh_from_str(std::string s);
RcppExport SEXP _tlshtree_tlsh_from_str(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_from_str(s));
    return rcpp_result_gen;
END_RCPP
}
// tlsh_from_strs
StringVector tlsh_from_strs(std::vector<std::string> xs);
RcppExport SEXP _tlshtree_tlsh_from_strs(SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type xs(xsSEXP);
    rcpp_result_gen = Rcpp::wrap(tlsh_from_strs(xs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tlshtree_tlsh_n_union", (DL_FUNC) &_tlshtree_tlsh_n_union, 3},
    {"_tlshtree_tlsh_diff", (DL_FUNC) &_tlshtree_tlsh_diff, 2},
    {"_tlshtree_tlsh_tree_info", (DL_FUNC) &_tlshtree_tlsh_tree_info, 1},
    {"_tlshtree_tlsh_tree_new", (DL_FUNC) &_tlshtree_tlsh_tree_new, 2},
    {"_tlshtree_tlsh_tree_matches", (DL_FUNC) &_tlshtree_tlsh_tree_matches, 3},
    {"_tlshtree_tlsh_tree_n_matches", (DL_FUNC) &_tlshtree_tlsh_tree_n_matches, 3},
    {"_tlshtree_tlsh_n_pairs", (DL_FUNC) &_tlshtree_tlsh_n_pairs, 2},
    {"_tlshtree_tlsh_tree_delete", (DL_FUNC) &_tlshtree_tlsh_tree_delete, 2},
    {"_tlshtree_tlsh_tree_add", (DL_FUNC) &_tlshtree_tlsh_tree_add, 2},
    {"_tlshtree_tlsh_from_str", (DL_FUNC) &_tlshtree_tlsh_from_str, 1},
    {"_tlshtree_tlsh_from_strs", (DL_FUNC) &_tlshtree_tlsh_from_strs, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tlshtree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
